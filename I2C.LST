C51 COMPILER V9.03   I2C                                                                   11/22/2014 02:38:01 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN I2C.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE I2C.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "Includes.h"
   2          
   3          /*---------------------------------------------------------------------------------*
   4                                   void I2C_Clock()
   5           ----------------------------------------------------------------------------------*
   6           * I/P Arguments: none.
   7           * Return value : none
   8          
   9           * description  :This function is used to generate a clock pulse on SCL line.
  10          -----------------------------------------------------------------------------------*/
  11          void I2C_Clock(void)
  12          {
  13   1              delay_us(1);
  14   1              SCL = 1;                // Wait for Some time and Pull the SCL line High
  15   1      
  16   1              delay_us(1);        // Wait for Some time
  17   1              SCL = 0;                // Pull back the SCL line low to Generate a clock pulse
  18   1      }
  19          
  20          
  21          
  22          
  23          
  24          
  25          
  26          /*---------------------------------------------------------------------------------*
  27                                   void I2C_Start()
  28           ----------------------------------------------------------------------------------*
  29           * I/P Arguments: none.
  30           * Return value : none
  31          
  32           * description  :This function is used to generate I2C Start Condition.
  33                           Start Condition: SDA goes low when SCL is High.
  34          
  35                                         ____________
  36                          SCL:          |            |
  37                                ________|            |______
  38                                     _________
  39                          SDA:      |         |
  40                                ____|         |____________
  41          
  42          -----------------------------------------------------------------------------------*/
  43          void I2C_Start()
  44          {
  45   1      
  46   1              SCL = 0;                // Pull SCL low
  47   1          
  48   1              SDA = 1;        // Pull SDA High
  49   1              delay_us(1);
  50   1      
  51   1              SCL = 1;                //Pull SCL high
  52   1              delay_us(1);
  53   1      
  54   1              SDA = 0;        //Now Pull SDA LOW, to generate the Start Condition
  55   1              delay_us(1);
C51 COMPILER V9.03   I2C                                                                   11/22/2014 02:38:01 PAGE 2   

  56   1      
  57   1              SCL = 0;        //Finally Clear the SCL to complete the cycle
  58   1      
  59   1      }
  60          
  61          
  62          
  63          
  64          
  65          /*-----------------------------------------------------------------------------------
  66                                   void I2C_Stop()
  67           ------------------------------------------------------------------------------------
  68           * I/P Arguments: none.
  69           * Return value : none
  70          
  71           * description  :This function is used to generate I2C Stop Condition.
  72                           Stop Condition: SDA goes High when SCL is High.
  73          
  74                                         ____________
  75                          SCL:          |            |
  76                                ________|            |______
  77                                           _________________
  78                          SDA:            |
  79                                __________|
  80          
  81          ------------------------------------------------------------------------------------*/
  82          
  83          void I2C_Stop(void)
  84          {
  85   1      
  86   1              SCL = 0;                        // Pull SCL low
  87   1              delay_us(1);
  88   1      
  89   1              SDA = 0;                        // Pull SDA  low
  90   1              delay_us(1);
  91   1      
  92   1              SCL = 1;                        // Pull SCL High
  93   1              delay_us(1);
  94   1      
  95   1              SDA = 1;                        // Now Pull SDA High, to generate the Stop Condition
  96   1      }
  97          
  98          
  99          
 100          
 101          
 102          
 103          
 104          
 105          /*---------------------------------------------------------------------------------*
 106                                   void I2C_Write(unsigned char dat)
 107           ----------------------------------------------------------------------------------*
 108           * I/P Arguments: unsigned char-->8bit data to be sent.
 109           * Return value : none
 110          
 111           * description  :This function is used to send a byte on SDA line using I2C protocol
 112                           8bit data is sent bit-by-bit on each clock cycle.
 113                           MSB(bit) is sent first and LSB(bit) is sent at last.
 114                           Data is sent when SCL is low.
 115          
 116                   ___     ___     ___     ___     ___     ___     ___     ___     ___     _
 117           SCL:   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
C51 COMPILER V9.03   I2C                                                                   11/22/2014 02:38:01 PAGE 3   

 118                __|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |___|
 119          
 120           SDA:        D8           D7     D6               D5     D4               D3      D2      D1      D0
 121          
 122          
 123          -----------------------------------------------------------------------------------*/
 124          void I2C_Write(unsigned char dat)
 125          {
 126   1              unsigned char i;
 127   1      
 128   1              for(i=0;i<8;i++)                 // loop 8 times to send 1-byte of data
 129   1               {
 130   2                      SDA = dat & 0x80;    // Send Bit by Bit on SDA line
 131   2                      I2C_Clock();             // Generate Clock at SCL
 132   2                      dat = dat<<1;
 133   2                }
 134   1              SDA = 1;                             // Set SDA at last
 135   1      
 136   1      }
 137          
 138          
 139          
 140          
 141          
 142          
 143          /*-----------------------------------------------------------------------------------*
 144                                   unsigned char I2C_Read()
 145           ------------------------------------------------------------------------------------*
 146           * I/P Arguments: none.
 147           * Return value : Unsigned char(received byte)
 148          
 149           * description :This fun is used to receive a byte on SDA line using I2C protocol.
 150                         8bit data is received bit-by-bit each clock and finally packed into Byte.
 151                         MSB(bit) is received first and LSB(bit) is received at last.
 152          
 153          
 154                   ___     ___     ___     ___     ___     ___     ___     ___     ___
 155          SCL:    |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
 156                __|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |___|   |___|
 157          
 158           SDA:    D8              D7               D6      D5      D4      D3      D2      D1      D0
 159          
 160          
 161          -------------------------------------------------------------------------------------*/
 162          unsigned char I2C_Read(void)
 163          {
 164   1              unsigned char i, dat=0x00;
 165   1      
 166   1                 SDA=1;                           //Make SDA as I/P
 167   1              for(i=0;i<8;i++)                // loop 8times read 1-byte of data
 168   1               {
 169   2                      delay_us(1);
 170   2      
 171   2      
 172   2                      SCL = 1;                        // Pull SCL High
 173   2                      delay_us(1);
 174   2      
 175   2                      dat = dat<<1;           //dat is Shifted each time and
 176   2                      dat = dat | SDA;        //ORed with the received bit to pack into byte
 177   2      
 178   2                      SCL = 0;                        // Clear SCL to complete the Clock
 179   2                 }
C51 COMPILER V9.03   I2C                                                                   11/22/2014 02:38:01 PAGE 4   

 180   1         return dat;                   // Finally return the received Byte*
 181   1      }
 182          
 183          
 184          
 185          
 186          
 187          
 188          
 189          /*---------------------------------------------------------------------------------*
 190                                   void I2C_Ack()
 191           ----------------------------------------------------------------------------------*
 192           * I/P Arguments: none.
 193           * Return value : none
 194          
 195           * description  :This function is used to generate a the Positive ACK
 196                           pulse on SDA after receiving a byte.
 197          -----------------------------------------------------------------------------------*/
 198          void I2C_Ack()
 199          {
 200   1              SDA = 0;                //Pull SDA low to indicate Positive ACK
 201   1              I2C_Clock();    //Generate the Clock
 202   1              SDA = 1;                // Pull SDA back to High(IDLE state)
 203   1      }
 204          
 205          
 206          
 207          
 208          
 209          /*---------------------------------------------------------------------------------*
 210                                   void I2C_NoAck()
 211           ----------------------------------------------------------------------------------*
 212           * I/P Arguments: none.
 213           * Return value : none
 214          
 215           * description  :This function is used to generate a the Negative/NO ACK
 216                           pulse on SDA after receiving all bytes.
 217          -----------------------------------------------------------------------------------*/
 218          void I2C_NoAck()
 219          {
 220   1              SDA = 1;                //Pull SDA high to indicate Negative/NO ACK
 221   1         I2C_Clock();     // Generate the Clock  
 222   1              SCL = 1;                // Set SCL */
 223   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    177    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
