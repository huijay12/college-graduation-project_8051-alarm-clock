C51 COMPILER V9.03   LCD                                                                   11/22/2014 02:38:01 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN LCD.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LCD.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "Includes.h"
   2          
   3          #define LCDMaxLines 2
   4          #define LCDMaxChars 16
   5          #define LineOne 0x80
   6          #define LineTwo 0xc0
   7          
   8          #define BlankSpace ' '
   9          
  10          /*----------------------------------------------------------------------------------
  11                                   void LCD_Init()
  12           ----------------------------------------------------------------------------------
  13           * Function name:  LCD_Init()
  14           * I/P Arguments: none.
  15           * Return value : none
  16          
  17           * description  :This function is used to initialize the lcd in 4-bit mode
  18          
  19          ----------------------------------------------------------------------------------*/
  20          void LCD_Init()
  21          {
  22   1          delay_us(5000);
  23   1         LCD_CmdWrite(0x02);  //Initilize the LCD in 4bit Mode
  24   1         delay_us(1000);
  25   1         LCD_CmdWrite(0x28);
  26   1         delay_us(1000);
  27   1         LCD_CmdWrite(0x0E);  // Display ON cursor ON
  28   1         delay_us(1000);
  29   1         LCD_CmdWrite(0x01);  // Clear the LCD
  30   1         delay_us(1000);
  31   1         LCD_CmdWrite(0x80);  // Move the Cursor to First line First Position
  32   1      
  33   1      }
  34          
  35          
  36          
  37          
  38          /*---------------------------------------------------------------------------------
  39                                   void LCD_Clear()
  40           ----------------------------------------------------------------------------------
  41           * I/P Arguments: none.
  42           * Return value : none
  43          
  44           * description  :This function clears the LCD and moves the cursor to first Position
  45          
  46          -----------------------------------------------------------------------------------*/
  47          void LCD_Clear()
  48          {
  49   1         LCD_CmdWrite(0x01);  // Clear the LCD and go to First line First Position
  50   1      }
  51          
  52          
  53          
  54          
  55          
C51 COMPILER V9.03   LCD                                                                   11/22/2014 02:38:01 PAGE 2   

  56          /*---------------------------------------------------------------------------------
  57                                   void LCD_GoToLineOne()
  58           ----------------------------------------------------------------------------------
  59           * I/P Arguments: none.
  60           * Return value : none
  61          
  62           * description  :This function moves the Cursor to First line First Position
  63          
  64          -----------------------------------------------------------------------------------*/
  65          void LCD_GoToLineOne()
  66          {
  67   1         LCD_CmdWrite(LineOne);       // Move the Cursor to First line First Position
  68   1      }
  69          
  70          
  71          
  72          
  73          /*---------------------------------------------------------------------------------
  74                                   void LCD_GoToLineTwo()
  75           ----------------------------------------------------------------------------------
  76           * I/P Arguments: none.
  77           * Return value : none
  78          
  79           * description  :This function moves the Cursor to Second line First Position
  80          
  81          -----------------------------------------------------------------------------------*/
  82          void LCD_GoToLineTwo()
  83          {
  84   1         LCD_CmdWrite(LineTwo);       // Move the Cursor to Second line First Position
  85   1      }
  86          
  87          
  88          
  89          
  90          /*---------------------------------------------------------------------------------
  91                                   void LCD_GoToXY(char row,char col)
  92           ----------------------------------------------------------------------------------
  93           * I/P Arguments: char row,char col
  94                           row -> line number(line1=0, line2=1),
  95                                  For 2line LCD the I/P argument should be either 0 or 1.
  96                           col -> char number.
  97                                  For 16-char LCD the I/P argument should be betwen 0-15.
  98           * Return value : none
  99          
 100           * description  :This function moves the Cursor to specified position
 101          
 102          -----------------------------------------------------------------------------------*/
 103          void LCD_GoToXY(char row, char col)
 104          {
 105   1         char pos;
 106   1      
 107   1          if(row<LCDMaxLines)
 108   1            {
 109   2                       pos= LineOne | (row << 6); // take the line number
 110   2                                                  //row0->pos=0x80  row1->pos=0xc0
 111   2      
 112   2                  if(col<LCDMaxChars)
 113   2                         pos= pos+col;            //take the char number
 114   2                                                  //now pos points to the given XY pos
 115   2      
 116   2                       LCD_CmdWrite(pos);            // Move the Cursor specified Position
 117   2             }
C51 COMPILER V9.03   LCD                                                                   11/22/2014 02:38:01 PAGE 3   

 118   1      }
 119          
 120          
 121          
 122          
 123          
 124          
 125          /*----------------------------------------------------------------------------------
 126                                 void LCD_CmdWrite( char cmd)
 127          ------------------------------------------------------------------------------------
 128           * I/P Arguments: 8-bit command supported by LCD.
 129           * Return value : none
 130          
 131           * description  :This function sends a command to LCD in the following steps.
 132               step1: Send the Higher Nibble of the I/P command to LCD.
 133               step2: Select the Control Register by making RS low.
 134               step3: Select Write operation making RW low.
 135                   step4: Send a High-to-Low pulse on Enable PIN with some delay_us.
 136          
 137                   step5: Send the Lower Nibble of the I/P command to LCD.
 138                   step6: Select the Control Register by making RS low.
 139                   step7: Select Write operation making RW low.
 140                   step8: Send a High-to-Low pulse on Enable PIN with some delay_us.
 141          ----------------------------------------------------------------------------------*/
 142          void LCD_CmdWrite( char cmd)
 143          {
 144   1      
 145   1         databus=(cmd & 0xf0);        // Send the Higher Nibble of the command to LCD
 146   1           rs=0;                                              // Select the Command Register by pulling RS LOW
 147   1           rw=0;                                              // Select the Write Operation  by pulling RW LOW
 148   1           en=1;                                              // Send a High-to-Low Pusle at Enable Pin
 149   1              delay_us(1);
 150   1           en=0;
 151   1      
 152   1         delay_us(10);                                        // wait for some time
 153   1      
 154   1         databus=((cmd<<4) & 0xf0);   // Send the Lower Nibble of the command to LCD
 155   1           rs=0;                                              // Select the Command Register by pulling RS LOW
 156   1           rw=0;                                              // Select the Write Operation  by pulling RW LOW
 157   1           en=1;                                              // Send a High-to-Low Pusle at Enable Pin
 158   1              delay_us(1);
 159   1           en=0;
 160   1      
 161   1         delay_ms(1);
 162   1      }
 163          
 164          
 165          
 166          
 167          
 168          
 169          
 170          
 171          /*---------------------------------------------------------------------------------
 172                                 void LCD_DataWrite( char dat)
 173           ----------------------------------------------------------------------------------
 174           * Function name: LCD_DataWrite()
 175           * I/P Arguments: ASCII value of the char to be displayed.
 176           * Return value : none
 177          
 178           * description  :
 179              This function sends a character to be displayed on LCD in the following steps.
C51 COMPILER V9.03   LCD                                                                   11/22/2014 02:38:01 PAGE 4   

 180                 step1: Send the higher nibble of the character to LCD.
 181                 step2: Select the Data Register by making RS high.
 182                 step3: Select Write operation making RW low.
 183                     step4: Send a High-to-Low pulse on Enable PIN with some delay_us.
 184          
 185                 step5: wait for some time
 186          
 187                 step6: Send the lower nibble of the character to LCD.
 188                     step7: Select the Data Register by making RS high.
 189                     step8: Select Write operation making RW low.
 190                     step9: Send a High-to-Low pulse on Enable PIN with some delay_us.
 191          ----------------------------------------------------------------------------------*/
 192          void LCD_DataWrite( char dat)
 193          {
 194   1      
 195   1      
 196   1         databus=(dat & 0xf0);            // Send the Higher Nibble of the Data to LCD
 197   1           rs=1;                                              // Select the Data Register by pulling RS HIGH
 198   1           rw=0;                                              // Select the Write Operation  by pulling RW LOW
 199   1           en=1;                                              // Send a High-to-Low Pusle at Enable Pin
 200   1              delay_us(1);
 201   1           en=0;
 202   1      
 203   1         delay_us(10);                                // wait for some time.
 204   1      
 205   1         databus=((dat <<4) & 0xf0);  // Send the Lower Nibble of the Data to LCD
 206   1           rs=1;                                              // Select the Data Register by pulling RS HIGH
 207   1           rw=0;                                              // Select the Write Operation  by pulling RW LOW
 208   1           en=1;                                              // Send a High-to-Low Pusle at Enable Pin
 209   1              delay_us(1);
 210   1           en=0;
 211   1      
 212   1         delay_ms(1);
 213   1      
 214   1      }
 215          
 216          
 217          
 218          
 219          
 220          
 221          /*---------------------------------------------------------------------------------
 222                                 void LCD_DisplayString(char *string_ptr)
 223           ----------------------------------------------------------------------------------
 224           * Function name:  lcd_display_string()
 225           * I/P Arguments: String(Address of the string) to be displayed.
 226           * Return value : none
 227          
 228           * description  :
 229                         This function is used to display the ASCII string on the lcd.
 230                           1.The string_ptr points to the first char of the string
 231                              and traverses till the end(NULL CHAR).
 232                           2.Each time a char is sent to lcd_dat funtion to display.
 233          -----------------------------------------------------------------------------------*/
 234          void LCD_DisplayString(char *string_ptr)
 235          {
 236   1         while(*string_ptr)
 237   1          LCD_DataWrite(*string_ptr++);
 238   1              }
 239          
 240          
 241          
C51 COMPILER V9.03   LCD                                                                   11/22/2014 02:38:01 PAGE 5   

 242          
 243          
 244          /*---------------------------------------------------------------------------------
 245                                void  LCD_DisplayNumber(unsigned int num)
 246           ----------------------------------------------------------------------------------
 247           * Function name:  LCD_DisplayNumber()
 248           * I/P Arguments: unsigned int.
 249           * Return value : none
 250          
 251           * description  :This function is used to display a 5-digit integer(0-65535).
 252                           ex: if the number is 12345 then 12345 is displayed.
 253                               if the number is 123 then 00123 is displayed.
 254          
 255          
 256           __________Take 1 by dividing by 10000 and add 0X30 to obtain the ASCII value,
 257          |           then take the 4-digit remainder(2345).
 258          |
 259          | _________Take 2 by dividing by 1000  and add 0X30 to obtain the ASCII value,
 260          ||           then take the 3-digit remainder(345)
 261          ||
 262          || ________Take 3 by dividing by 100   and add 0X30 to obtain the ASCII value,
 263          |||           then take the 2-digit remainder(45).
 264          |||
 265          ||| _______Take 4 by dividing by 10    and add 0X30 to obtain the ASCII value,
 266          |||| ______Take 5 the remainder of 45  and add 0X30 to obtain the ASCII value,.
 267          |||||
 268          12345
 269          -----------------------------------------------------------------------------------*/
 270          void LCD_DisplayNumber(unsigned int num)
 271          {
 272   1         LCD_DataWrite((num/10000)+0x30);
 273   1         num=num%10000;
 274   1      
 275   1         LCD_DataWrite((num/1000)+0x30);
 276   1         num=num%1000;
 277   1      
 278   1         LCD_DataWrite((num/100)+0x30);
 279   1         num=num%100;
 280   1      
 281   1         LCD_DataWrite((num/10)+0x30);
 282   1      
 283   1         LCD_DataWrite((num%10)+0x30);
 284   1      
 285   1       }
 286          
 287          
 288          
 289          
 290          /*---------------------------------------------------------------------------------
 291                            void LCD_ScrollMessage(char *msg_ptr)
 292           ----------------------------------------------------------------------------------
 293           * I/P Arguments: char *msg_ptr
 294                           msg_ptr -> pointer to the string to be scrolled
 295          
 296           * Return value : none
 297          
 298           * description  :This function scrolls the given message on the first line.
 299                  1.16 chars are displayed at atime.
 300                  2.Pointer is incremented to skip a char each time to give the illusion of
 301                     moving chars
 302                  3.If the chars are less than 16, then the BlankSpaces are displayed.
 303          
C51 COMPILER V9.03   LCD                                                                   11/22/2014 02:38:01 PAGE 6   

 304          -----------------------------------------------------------------------------------*/
 305          
 306          void LCD_ScrollMessage(char *msg_ptr)
 307          {
 308   1        unsigned char i,j;
 309   1      
 310   1        for(i=0;msg_ptr[i];i++)        //Loop to display the string complete
 311   1          {                            //each time 16 chars are displayed and
 312   2                                       //pointer is incremented to point to next char
 313   2      
 314   2            LCD_CmdWrite(LineOne);                   //Move the Cursor to first line
 315   2      
 316   2          for(j=0;j<LCDMaxChars && msg_ptr[i+j];j++) //loop to Display first 16 Chars
 317   2                LCD_DataWrite(msg_ptr[i+j]);                 //or till Null char
 318   2      
 319   2              for(j=j; j<LCDMaxChars; j++)               //If the chars are below 16
 320   2            LCD_DataWrite(BlankSpace);              //then display blank spaces
 321   2      
 322   2           delay_ms(150);
 323   2          }
 324   1      }
 325          
 326          
 327          
 328          
 329          
 330          /*---------------------------------------------------------------------------------
 331                            LCD_DisplayRtcTime(char hour,char min,char sec)
 332           ----------------------------------------------------------------------------------
 333           * I/P Arguments: char hour,char min,char sec
 334                       hour,min,sec should be packed BCD format, as read from DS1307
 335          
 336           * Return value : none
 337          
 338           * description  :This function display hour,min,sec read from DS1307.
 339          
 340             ___________ Display the higher nibble of hour after adding 0x30(ASCII conversion)
 341            |            Display the lower nibble of hour after adding 0x30(ASCII conversion)
 342            |
 343            |       ________ Display the higher nibble of min after adding 0x30(ASCII conversion)
 344            |      |         Display the lower nibble of min after adding 0x30(ASCII conversion)
 345            |      |
 346            |      |       _____ Display the higher nibble of sec after adding 0x30(ASCII conversion)
 347            |      |      |      Display the lower nibble of sec after adding 0x30(ASCII conversion)
 348            |      |      |
 349            10;40;07
 350          
 351          -----------------------------------------------------------------------------------*/
 352          void LCD_DisplayRtcTime(char hour,char min,char sec)
 353          {
 354   1          LCD_DataWrite(((hour>>4) & 0x0f) + 0x30);
 355   1          LCD_DataWrite((hour & 0x0f) + 0x30);
 356   1          LCD_DataWrite(':');
 357   1      
 358   1          LCD_DataWrite(((min>>4) & 0x0f) + 0x30);
 359   1              LCD_DataWrite((min & 0x0f) + 0x30);
 360   1          LCD_DataWrite(':');
 361   1      
 362   1          LCD_DataWrite(((sec>>4) & 0x0f) + 0x30);
 363   1              LCD_DataWrite((sec & 0x0f) + 0x30);
 364   1      
 365   1       }
C51 COMPILER V9.03   LCD                                                                   11/22/2014 02:38:01 PAGE 7   

 366          
 367          
 368          
 369          
 370          
 371          
 372          /*---------------------------------------------------------------------------------
 373                            LCD_DisplayRtcDate(char day,char month,char year)
 374           ----------------------------------------------------------------------------------
 375           * I/P Arguments: char day,char month,char year
 376                       day,month,year should be packed BCD format, as read from DS1307
 377          
 378           * Return value : none
 379          
 380           * description  :This function display day,month,year read from DS1307.
 381          
 382             ___________ Display the higher nibble of day after adding 0x30(ASCII conversion)
 383            |            Display the lower nibble of day after adding 0x30(ASCII conversion)
 384            |
 385            |   ________ Display the higher nibble of month after adding 0x30(ASCII conversion)
 386            |  |         Display the lower nibble of month after adding 0x30(ASCII conversion)
 387            |  |
 388            |  |   _____ Display the higher nibble of year after adding 0x30(ASCII conversion)
 389            |  |  |      Display the lower nibble of year after adding 0x30(ASCII conversion)
 390            |  |  |
 391            01/01/12 (1st-Jan 2012)
 392          
 393          -----------------------------------------------------------------------------------*/
 394          void LCD_DisplayRtcDate(char day,char month,char year)
 395           {
 396   1           LCD_DataWrite(((day>>4) & 0x0f) + 0x30);
 397   1           LCD_DataWrite((day & 0x0f) + 0x30);
 398   1           LCD_DataWrite('/');
 399   1      
 400   1           LCD_DataWrite(((month>>4) & 0x0f) + 0x30);
 401   1              LCD_DataWrite((month & 0x0f) + 0x30);
 402   1           LCD_DataWrite('/');
 403   1      
 404   1           LCD_DataWrite(((year>>4) & 0x0f) + 0x30);
 405   1              LCD_DataWrite((year & 0x0f) + 0x30);
 406   1      
 407   1       }
 408          
 409           


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    663    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
